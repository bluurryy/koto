import color

assert_color_near = |a, b|
  allowed_error = 1.0e-3
  for component_a, component_b in a.zip b
    assert_near component_a, component_b, allowed_error
    assert_near component_a, component_b, allowed_error
    assert_near component_a, component_b, allowed_error
    assert_near component_a, component_b, allowed_error

@tests =
  @test rgb: ||
    assert_eq (color 1, 0, 1), (color.rgb 1, 0, 1)
    assert_eq (color 0, 0.5, 0.9), (color.rgb 0, 0.5, 0.9)

  @test hsl: ||
    assert_color_near (color.hsl 0.0, 1.0, 0.5).to_rgb(), (color.rgb 1.0, 0.0, 0.0)
    assert_color_near (color.hsl 270, 1.0, 0.5).to_rgb(), (color.rgb 0.5, 0.0, 1.0)
    assert_color_near (color.hsl 270, 1.0, 0.8).to_rgb(), (color.rgb 0.8, 0.6, 1.0)

  @test hsv: ||
    assert_color_near (color.hsv 180, 0.5, 1.0).to_rgb(), (color.rgb 0.5, 1.0, 1.0)
    assert_color_near (color.hsv 180, 1.0, 1.0).to_rgb(), (color.rgb 0.0, 1.0, 1.0)
    assert_color_near (color.hsv 270, 1.0, 1.0).to_rgb(), (color.rgb 0.5, 0.0, 1.0)

  @test named: ||
    assert_eq (color 'blue'), (color.named 'blue')
    assert_eq (color 'red'), (color.rgb 1, 0, 0)

  @test mix: ||
    a = color 'red'
    b = color 'blue'
    assert_eq a.mix(b), color.rgb 0.5, 0.0, 0.5, 1.0
    assert_eq a.mix(b, 0.25), color.rgb 0.75, 0.0, 0.25, 1.0
    assert_eq a.mix(b, 0.75), color.rgb 0.25, 0.0, 0.75, 1.0

  @test index: ||
    assert_eq (color 'blue')[1], 0
    assert_eq (color 'blue')[2], 1

  @test iterator: ||
    assert_eq (color 'blue').to_tuple(), (0, 0, 1, 1)

    r, g, b, a = color 'red'
    assert_eq (r, g, b, a), (1, 0, 0, 1)

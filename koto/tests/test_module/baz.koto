# This file is imported by ./main.koto

# Define a local value before importing other values
local_value = -999

# Test that import works within a submodule
from number import *
assert_eq pi, pi

# Export a function that refers to a value that isn't exported until later in the module
export get_qux = || qux

# Define `qux` locally first to ensure that exporting works while redefining values
qux = null

# Export `qux` using inline map syntax
export {qux, @type: 'Baz'}

export 
  # Export a function that makes use of a wildcard import from earlier in the module
  get_abs_local_value: || abs local_value

  @main: ||
    # Redefine qux to check that main gets called during import
    export qux = 'O_o'
    assert_eq qux, 'O_o'

  @test local_value_unmodified_by_import: ||
    # Ensure that the local value captured here wasn't affected by the earlier `import`
    assert_eq local_value, -999

  @test script_dir_and_path: ||
    # Ensure that script_dir/path are defined correctly within the module
    assert koto.script_dir().ends_with 'test_module'
    path = koto.script_path()
    assert path.contains 'test_module'
    assert path.ends_with 'baz.koto'

  @test parent_export_is_not_available: ||
    caught_error = false
    try
      # `foo` was expored in the parent module before importing this module,
      # and shouldn't be available as a non-local.
      x = foo
    catch _
      caught_error = true
    assert caught_error
